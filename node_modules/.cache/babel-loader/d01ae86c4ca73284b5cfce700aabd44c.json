{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/iku/Dropbox/program/project/samonline/UI/src/logged_in/components/subscription/LazyLoadAddBalanceDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction LazyLoadAddBalanceDialog(props) {\n  _s();\n\n  const {\n    open,\n    onClose,\n    onSuccess\n  } = props;\n  const [AddBalanceDialog, setAddBalanceDialog] = useState(null);\n  const [hasFetchedAddBalanceDialog, setHasFetchedAddBlanceDialog] = useState(false);\n  useEffect(() => {\n    if (open && !hasFetchedAddBalanceDialog) {\n      setHasFetchedAddBlanceDialog(true);\n      import(\"./AddBalanceDialog\").then(Component => {\n        setAddBalanceDialog(() => Component.default);\n      });\n    }\n  }, [open, hasFetchedAddBalanceDialog, setHasFetchedAddBlanceDialog, setAddBalanceDialog]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: AddBalanceDialog && /*#__PURE__*/_jsxDEV(AddBalanceDialog, {\n      open: open,\n      onClose: onClose,\n      onSuccess: onSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LazyLoadAddBalanceDialog, \"jnprC/jIo7ZyJ5Yb9YhK2zEK1Ow=\");\n\n_c = LazyLoadAddBalanceDialog;\nLazyLoadAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\nexport default LazyLoadAddBalanceDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"LazyLoadAddBalanceDialog\");","map":{"version":3,"sources":["/home/iku/Dropbox/program/project/samonline/UI/src/logged_in/components/subscription/LazyLoadAddBalanceDialog.js"],"names":["React","useState","useEffect","Fragment","PropTypes","LazyLoadAddBalanceDialog","props","open","onClose","onSuccess","AddBalanceDialog","setAddBalanceDialog","hasFetchedAddBalanceDialog","setHasFetchedAddBlanceDialog","then","Component","default","propTypes","bool","isRequired","func"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyC;AAAA;;AACvC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA+BH,KAArC;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACW,0BAAD,EAA6BC,4BAA7B,IAA6DZ,QAAQ,CAAC,KAAD,CAA3E;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,IAAI,IAAI,CAACK,0BAAb,EAAyC;AACvCC,MAAAA,4BAA4B,CAAC,IAAD,CAA5B;AACA,aAAO,oBAAP,EAA6BC,IAA7B,CAAkCC,SAAS,IAAI;AAC7CJ,QAAAA,mBAAmB,CAAC,MAAMI,SAAS,CAACC,OAAjB,CAAnB;AACD,OAFD;AAGD;AACF,GAPQ,EAON,CAACT,IAAD,EAAOK,0BAAP,EAAmCC,4BAAnC,EAAiEF,mBAAjE,CAPM,CAAT;AASA,sBACE,QAAC,QAAD;AAAA,cACGD,gBAAgB,iBACf,QAAC,gBAAD;AACE,MAAA,IAAI,EAAEH,IADR;AAEE,MAAA,OAAO,EAAEC,OAFX;AAGE,MAAA,SAAS,EAAEC;AAHb;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA1BQJ,wB;;KAAAA,wB;AA4BTA,wBAAwB,CAACY,SAAzB,GAAqC;AACnCV,EAAAA,IAAI,EAAEH,SAAS,CAACc,IAAV,CAAeC,UADc;AAEnCX,EAAAA,OAAO,EAAEJ,SAAS,CAACgB,IAAV,CAAeD,UAFW;AAGnCV,EAAAA,SAAS,EAAEL,SAAS,CAACgB,IAAV,CAAeD;AAHS,CAArC;AAMA,eAAed,wBAAf","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction LazyLoadAddBalanceDialog(props) {\n  const { open, onClose, onSuccess } = props;\n  const [AddBalanceDialog, setAddBalanceDialog] = useState(null);\n  const [hasFetchedAddBalanceDialog, setHasFetchedAddBlanceDialog] = useState(false);\n\n  useEffect(() => {\n    if (open && !hasFetchedAddBalanceDialog) {\n      setHasFetchedAddBlanceDialog(true);\n      import(\"./AddBalanceDialog\").then(Component => {\n        setAddBalanceDialog(() => Component.default);\n      });\n    }\n  }, [open, hasFetchedAddBalanceDialog, setHasFetchedAddBlanceDialog, setAddBalanceDialog]);\n\n  return (\n    <Fragment>\n      {AddBalanceDialog && (\n        <AddBalanceDialog\n          open={open}\n          onClose={onClose}\n          onSuccess={onSuccess}\n        ></AddBalanceDialog>\n      )}\n    </Fragment>\n  );\n\n}\n\nLazyLoadAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default LazyLoadAddBalanceDialog;\n"]},"metadata":{},"sourceType":"module"}