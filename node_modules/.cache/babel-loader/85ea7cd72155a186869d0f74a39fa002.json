{"ast":null,"code":"import React from 'react';\nimport styles from './progress.module.css';\n\nfunction useAnimateValue(value, duration) {\n  const [current, setCurrent] = React.useState(value);\n  React.useLayoutEffect(() => {\n    const stepDuration = 1 / 50;\n    const totalSteps = duration / stepDuration;\n    const stepSize = (value - current) / totalSteps;\n    let currentStep = 0;\n    const interval = setInterval(() => setCurrent(current => {\n      currentStep++;\n\n      if (currentStep >= totalSteps) {\n        clearInterval(interval);\n        return value;\n      }\n\n      return current + stepSize;\n    }), stepDuration * 1000);\n    return () => clearInterval(interval);\n  }, [value, duration]);\n  return current;\n}\n\nconst AnimatePercentage = /*#__PURE__*/React.memo(({\n  value,\n  duration\n}) => {\n  const v = useAnimateValue(value, duration);\n  return Math.round(v * 100) / 100;\n});\n\nfunction _Progress({\n  progress = 0,\n  strokeWidth = 4,\n  ballStrokeWidth = 16,\n  reduction = 0.25,\n  transitionDuration = 0.5,\n  transitionTimingFunction = 'ease',\n  background = '#dde2e9',\n  hideBall = false,\n  hideValue = false,\n  gradient = [{\n    stop: 0.0,\n    color: '#00bc9b'\n  }, {\n    stop: 1,\n    color: '#5eaefd'\n  }],\n  subtitle = \"\",\n  style,\n  className\n}) {\n  progress = Math.round(progress * 100) / 100;\n  const width = 200;\n  const center = width / 2;\n  const height = 200 || center + center * Math.cos(reduction * Math.PI);\n  const [unique] = React.useState(() => Math.random().toString());\n  const rotate = 90 + 180 * reduction;\n  const r = center - strokeWidth / 2 - ballStrokeWidth / 2;\n  const circumference = Math.PI * r * 2;\n  const offset = circumference * (100 - progress * (1 - reduction)) / 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${className} ${styles.progress}`,\n    style: style\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: `0 0 ${width} ${height}`,\n    className: styles.svg\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradient\" + unique,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\"\n  }, gradient.map(({\n    stop,\n    color\n  }) => /*#__PURE__*/React.createElement(\"stop\", {\n    key: stop,\n    offset: stop * 100 + \"%\",\n    stopColor: color\n  })))), !hideValue && /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center,\n    textAnchor: \"middle\",\n    fontSize: \"30\",\n    fill: \"#3c3c3c\"\n  }, progress, \"%\"), /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center + 30 * 3 / 4,\n    textAnchor: \"middle\",\n    fill: \"#9c9c9c\"\n  }, subtitle), /*#__PURE__*/React.createElement(\"circle\", {\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circumference,\n    strokeDashoffset: circumference * reduction,\n    fill: \"none\",\n    stroke: background,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\n    },\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: `${circumference}`,\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: `url(#gradient${unique})`,\n    strokeLinecap: \"round\"\n  }), !hideBall && /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\n    },\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: ballStrokeWidth,\n    strokeDasharray: `1 ${circumference}`,\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: `url(#gradient${unique})`,\n    strokeLinecap: \"round\"\n  })));\n}\n\nexport const Progress = /*#__PURE__*/React.memo(_Progress);\nProgress.displayName = \"Progress\";\nexport default Progress;","map":{"version":3,"sources":["/home/iku/Dropbox/program/project/samonline/UI/node_modules/react-circle-progress-bar/dist/progress.js"],"names":["React","styles","useAnimateValue","value","duration","current","setCurrent","useState","useLayoutEffect","stepDuration","totalSteps","stepSize","currentStep","interval","setInterval","clearInterval","AnimatePercentage","memo","v","Math","round","_Progress","progress","strokeWidth","ballStrokeWidth","reduction","transitionDuration","transitionTimingFunction","background","hideBall","hideValue","gradient","stop","color","subtitle","style","className","width","center","height","cos","PI","unique","random","toString","rotate","r","circumference","offset","createElement","viewBox","svg","id","x1","y1","x2","y2","map","key","stopColor","x","y","textAnchor","fontSize","fill","transform","cx","cy","strokeDasharray","strokeDashoffset","stroke","strokeLinecap","transition","Progress","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './progress.module.css';\n\nfunction useAnimateValue(value, duration) {\n  const [current, setCurrent] = React.useState(value);\n  React.useLayoutEffect(() => {\n    const stepDuration = 1 / 50;\n    const totalSteps = duration / stepDuration;\n    const stepSize = (value - current) / totalSteps;\n    let currentStep = 0;\n    const interval = setInterval(() => setCurrent(current => {\n      currentStep++;\n\n      if (currentStep >= totalSteps) {\n        clearInterval(interval);\n        return value;\n      }\n\n      return current + stepSize;\n    }), stepDuration * 1000);\n    return () => clearInterval(interval);\n  }, [value, duration]);\n  return current;\n}\n\nconst AnimatePercentage = /*#__PURE__*/React.memo(({\n  value,\n  duration\n}) => {\n  const v = useAnimateValue(value, duration);\n  return Math.round(v * 100) / 100;\n});\n\nfunction _Progress({\n  progress = 0,\n  strokeWidth = 4,\n  ballStrokeWidth = 16,\n  reduction = 0.25,\n  transitionDuration = 0.5,\n  transitionTimingFunction = 'ease',\n  background = '#dde2e9',\n  hideBall = false,\n  hideValue = false,\n  gradient = [{\n    stop: 0.0,\n    color: '#00bc9b'\n  }, {\n    stop: 1,\n    color: '#5eaefd'\n  }],\n  subtitle = \"\",\n  style,\n  className\n}) {\n  progress = Math.round(progress * 100) / 100;\n  const width = 200;\n  const center = width / 2;\n  const height = 200 || center + center * Math.cos(reduction * Math.PI);\n  const [unique] = React.useState(() => Math.random().toString());\n  const rotate = 90 + 180 * reduction;\n  const r = center - strokeWidth / 2 - ballStrokeWidth / 2;\n  const circumference = Math.PI * r * 2;\n  const offset = circumference * (100 - progress * (1 - reduction)) / 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${className} ${styles.progress}`,\n    style: style\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: `0 0 ${width} ${height}`,\n    className: styles.svg\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradient\" + unique,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\"\n  }, gradient.map(({\n    stop,\n    color\n  }) => /*#__PURE__*/React.createElement(\"stop\", {\n    key: stop,\n    offset: stop * 100 + \"%\",\n    stopColor: color\n  })))), !hideValue && /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center,\n    textAnchor: \"middle\",\n    fontSize: \"30\",\n    fill: \"#3c3c3c\"\n  }, progress, \"%\"), /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center + 30 * 3 / 4,\n    textAnchor: \"middle\",\n    fill: \"#9c9c9c\"\n  }, subtitle), /*#__PURE__*/React.createElement(\"circle\", {\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circumference,\n    strokeDashoffset: circumference * reduction,\n    fill: \"none\",\n    stroke: background,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\n    },\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: `${circumference}`,\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: `url(#gradient${unique})`,\n    strokeLinecap: \"round\"\n  }), !hideBall && /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\n    },\n    transform: `rotate(${rotate} ${center} ${center})`,\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: ballStrokeWidth,\n    strokeDasharray: `1 ${circumference}`,\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: `url(#gradient${unique})`,\n    strokeLinecap: \"round\"\n  })));\n}\n\nexport const Progress = /*#__PURE__*/React.memo(_Progress);\nProgress.displayName = \"Progress\";\nexport default Progress;"]},"metadata":{},"sourceType":"module"}