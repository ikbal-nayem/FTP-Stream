{"ast":null,"code":"import e from \"react\";\nimport t from \"react-intersection-observer\";\nimport { unionize as n, ofType as r } from \"unionize\";\n\nvar o = function (e, t) {\n  return (o = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (e, t) {\n    e.__proto__ = t;\n  } || function (e, t) {\n    for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);\n  })(e, t);\n};\n\nvar a,\n    i = function () {\n  return (i = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n};\n\nfunction c(e, t) {\n  var n = {};\n\n  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);\n\n  if (null != e && \"function\" == typeof Object.getOwnPropertySymbols) {\n    var o = 0;\n\n    for (r = Object.getOwnPropertySymbols(e); o < r.length; o++) t.indexOf(r[o]) < 0 && (n[r[o]] = e[r[o]]);\n  }\n\n  return n;\n}\n\n!function (e) {\n  e.NotAsked = \"NotAsked\", e.Loading = \"Loading\", e.LoadSuccess = \"LoadSuccess\", e.LoadError = \"LoadError\";\n}(a || (a = {}));\n\nvar u = n({\n  NotAsked: {},\n  Buffering: {},\n  Loading: {},\n  LoadSuccess: {},\n  LoadError: r()\n}),\n    s = n({\n  ViewChanged: r(),\n  BufferingEnded: {},\n  LoadSuccess: {},\n  LoadError: r()\n}),\n    d = function (e, t) {\n  return function (n) {\n    var r = g(l(e, t));\n    r.promise.then(function (e) {\n      return n.update(s.LoadSuccess({}));\n    }).catch(function (e) {\n      e.isCanceled || n.update(s.LoadError({\n        msg: \"Failed to load\"\n      }));\n    }), n.promiseCache.loading = r;\n  };\n},\n    f = function (e) {\n  e.promiseCache.buffering.cancel();\n},\n    p = function (n) {\n  function r(e) {\n    var t = n.call(this, e) || this;\n    return t.promiseCache = {}, t.initialState = u.NotAsked(), t.state = t.initialState, t.update = t.update.bind(t), t;\n  }\n\n  return function (e, t) {\n    function n() {\n      this.constructor = e;\n    }\n\n    o(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n  }(r, n), r.reducer = function (e, t, n) {\n    return s.match(e, {\n      ViewChanged: function (e) {\n        return !0 === e.inView ? n.src ? u.match(t, {\n          NotAsked: function () {\n            return n.debounceDurationMs ? {\n              nextState: u.Buffering(),\n              cmd: (e = n.debounceDurationMs, function (t) {\n                var n = g(m(e));\n                n.promise.then(function () {\n                  return t.update(s.BufferingEnded());\n                }).catch(function (e) {}), t.promiseCache.buffering = n;\n              })\n            } : {\n              nextState: u.Loading(),\n              cmd: d(n, n.experimentalDecode)\n            };\n            var e;\n          },\n          default: function () {\n            return {\n              nextState: t\n            };\n          }\n        }) : {\n          nextState: u.LoadSuccess()\n        } : u.match(t, {\n          Buffering: function () {\n            return {\n              nextState: u.NotAsked(),\n              cmd: f\n            };\n          },\n          default: function () {\n            return {\n              nextState: t\n            };\n          }\n        });\n      },\n      BufferingEnded: function () {\n        return {\n          nextState: u.Loading(),\n          cmd: d(n, n.experimentalDecode)\n        };\n      },\n      LoadSuccess: function () {\n        return {\n          nextState: u.LoadSuccess()\n        };\n      },\n      LoadError: function (e) {\n        return {\n          nextState: u.LoadError(e)\n        };\n      }\n    });\n  }, r.prototype.update = function (e) {\n    var t = this,\n        n = r.reducer(e, this.state, this.props),\n        o = n.nextState,\n        a = n.cmd;\n    this.props.debugActions && (\"production\" === process.env.NODE_ENV && console.warn('You are running LazyImage with debugActions=\"true\" in production. This might have performance implications.'), console.log({\n      action: e,\n      prevState: this.state,\n      nextState: o\n    })), this.setState(o, function () {\n      return a && a(t);\n    });\n  }, r.prototype.componentWillUnmount = function () {\n    this.promiseCache.loading && this.promiseCache.loading.cancel(), this.promiseCache.buffering && this.promiseCache.buffering.cancel(), this.promiseCache = {};\n  }, r.prototype.render = function () {\n    var n = this,\n        r = this.props,\n        o = r.children,\n        d = r.loadEagerly,\n        f = r.observerProps,\n        p = c(r, [\"children\", \"loadEagerly\", \"observerProps\", \"experimentalDecode\", \"debounceDurationMs\", \"debugActions\"]);\n    return d ? o({\n      imageState: u.LoadSuccess().tag,\n      imageProps: p\n    }) : e.createElement(t, i({\n      rootMargin: \"50px 0px\",\n      threshold: .01\n    }, f, {\n      onChange: function (e) {\n        return n.update(s.ViewChanged({\n          inView: e\n        }));\n      }\n    }), function (e) {\n      return o({\n        imageState: \"Buffering\" === n.state.tag ? a.Loading : n.state.tag,\n        imageProps: p,\n        ref: e.ref\n      });\n    });\n  }, r.displayName = \"LazyImageFull\", r;\n}(e.Component),\n    l = function (e, t) {\n  var n = e.src,\n      r = e.srcSet,\n      o = e.alt,\n      a = e.sizes;\n  return void 0 === t && (t = !1), new Promise(function (e, i) {\n    var c = new Image();\n    if (r && (c.srcset = r), o && (c.alt = o), a && (c.sizes = a), c.src = n, t && \"decode\" in c) return c.decode().then(function (t) {\n      return e(t);\n    }).catch(function (e) {\n      return i(e);\n    });\n    c.onload = e, c.onerror = i;\n  });\n},\n    m = function (e) {\n  return new Promise(function (t) {\n    return setTimeout(t, e);\n  });\n},\n    g = function (e) {\n  var t = !1;\n  return {\n    promise: new Promise(function (n, r) {\n      e.then(function (e) {\n        return t ? r({\n          isCanceled: !0\n        }) : n(e);\n      }), e.catch(function (e) {\n        return r(t ? {\n          isCanceled: !0\n        } : e);\n      });\n    }),\n    cancel: function () {\n      t = !0;\n    }\n  };\n},\n    h = function (t) {\n  var n = t.actual,\n      r = t.placeholder,\n      o = t.loading,\n      u = t.error,\n      s = c(t, [\"actual\", \"placeholder\", \"loading\", \"error\"]);\n  return e.createElement(p, i({}, s), function (e) {\n    var t = e.imageProps,\n        i = e.ref;\n\n    switch (e.imageState) {\n      case a.NotAsked:\n        return !!r && r({\n          imageProps: t,\n          ref: i\n        });\n\n      case a.Loading:\n        return o ? o() : !!r && r({\n          imageProps: t,\n          ref: i\n        });\n\n      case a.LoadSuccess:\n        return n({\n          imageProps: t\n        });\n\n      case a.LoadError:\n        return u ? u() : n({\n          imageProps: t\n        });\n    }\n  });\n};\n\nh.displayName = \"LazyImage\";\nexport { h as LazyImage, a as ImageState, p as LazyImageFull };","map":{"version":3,"sources":["../src/LazyImageFull.tsx","../src/LazyImage.tsx"],"names":["ImageState","LazyImageFullState","unionize","NotAsked","Buffering","Loading","LoadSuccess","LoadError","ofType","Action","ViewChanged","BufferingEnded","durationMs","bufferingPromise","makeCancelable","delayedPromise","promise","then","update","catch","instance","promiseCache","buffering","getLoadingCmd","imageProps","experimentalDecode","loadingPromise","loadImage","e","isCanceled","msg","loading","cancelBufferingCmd","cancel","tslib_1.__extends","Component","LazyImageFull","_this","action","prevState","props","match","_a","src","nextState","debounceDurationMs","cmd","default","_super","state","initialState","bind","this","debugActions","process","env","NODE_ENV","console","warn","log","setState","children","loadEagerly","observerProps","imageState","tag","React","Observer","rootMargin","threshold","onChange","inView","ref","srcSet","alt","sizes","Promise","resolve","reject","image","Image","srcset","decode","err","onload","onerror","ms","hasCanceled_","val","error","LazyImage","placeholder","rest","actual","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Observer from \"react-intersection-observer\";\nimport { unionize, ofType, UnionOf } from \"unionize\";\n\n/**\n * Valid props for LazyImage components\n */\nexport type CommonLazyImageProps = ImageProps & {\n  // NOTE: if you add props here, remember to destructure them out of being\n  // passed to the children, in the render() callback.\n\n  /** Whether to skip checking for viewport and always show the 'actual' component\n   * @see https://github.com/fpapado/react-lazy-images/#eager-loading--server-side-rendering-ssr\n   */\n  loadEagerly?: boolean;\n\n  /** Subset of props for the IntersectionObserver\n   * @see https://github.com/thebuilder/react-intersection-observer#props\n   */\n  observerProps?: ObserverProps;\n\n  /** Use the Image Decode API;\n   * The call to a new HTML <img> element’s decode() function returns a promise, which,\n   * when fulfilled, ensures that the image can be appended to the DOM without causing\n   * a decoding delay on the next frame.\n   *  @see: https://www.chromestatus.com/feature/5637156160667648\n   */\n  experimentalDecode?: boolean;\n\n  /** Whether to log out internal state transitions for the component */\n  debugActions?: boolean;\n\n  /** Delay a certain duration before starting to load, in ms.\n   * This can help avoid loading images while the user scrolls quickly past them.\n   * TODO: naming things.\n   */\n  debounceDurationMs?: number;\n};\n\n/** Valid props for LazyImageFull */\nexport interface LazyImageFullProps extends CommonLazyImageProps {\n  /** Children should be either a function or a node */\n  children: (args: RenderCallbackArgs) => React.ReactNode;\n}\n\n/** Values that the render props take */\nexport interface RenderCallbackArgs {\n  imageState: ImageState;\n  imageProps: ImageProps;\n  /** When not loading eagerly, a ref to bind to the DOM element. This is needed for the intersection calculation to work. */\n  ref?: React.RefObject<any>;\n}\n\nexport interface ImageProps {\n  /** The source of the image to load */\n  src: string;\n\n  /** The source set of the image to load */\n  srcSet?: string;\n\n  /** The alt text description of the image you are loading */\n  alt?: string;\n\n  /** Sizes descriptor */\n  sizes?: string;\n}\n\n/** Subset of react-intersection-observer's props */\nexport interface ObserverProps {\n  /**\n   * Margin around the root that expands the area for intersection.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n   * @default \"50px 0px\"\n   * @example Declaration same as CSS margin:\n   *  `\"10px 20px 30px 40px\"` (top, right, bottom, left).\n   */\n  rootMargin?: string;\n\n  /** Number between 0 and 1 indicating the the percentage that should be\n   * visible before triggering.\n   * @default `0.01`\n   */\n  threshold?: number;\n}\n\n/** States that the image loading can be in.\n * Used together with LazyImageFull render props.\n * External representation of the internal state.\n * */\nexport enum ImageState {\n  NotAsked = \"NotAsked\",\n  Loading = \"Loading\",\n  LoadSuccess = \"LoadSuccess\",\n  LoadError = \"LoadError\"\n}\n\n/** The component's state */\nconst LazyImageFullState = unionize({\n  NotAsked: {},\n  Buffering: {},\n  // Could try to make it Promise<HTMLImageElement>,\n  // but we don't use the element anyway, and we cache promises\n  Loading: {},\n  LoadSuccess: {},\n  LoadError: ofType<{ msg: string }>()\n});\n\ntype LazyImageFullState = UnionOf<typeof LazyImageFullState>;\n\n/** Actions that change the component's state.\n * These are not unlike Actions in Redux or, the ones I'm inspired by,\n * Msg in Elm.\n */\nconst Action = unionize({\n  ViewChanged: ofType<{ inView: boolean }>(),\n  BufferingEnded: {},\n  // MAYBE: Load: {},\n  LoadSuccess: {},\n  LoadError: ofType<{ msg: string }>()\n});\n\ntype Action = UnionOf<typeof Action>;\n\n/** Commands (Cmd) describe side-effects as functions that take the instance */\n// FUTURE: These should be tied to giving back a Msg / asynchronoulsy giving a Msg with conditions\ntype Cmd = (instance: LazyImageFull) => void;\n\n/** The output from a reducer is the next state and maybe a command */\ntype ReducerResult = {\n  nextState: LazyImageFullState;\n  cmd?: Cmd;\n};\n\n///// Commands, things that perform side-effects /////\n/** Get a command that sets a buffering Promise */\nconst getBufferingCmd = (durationMs: number): Cmd => instance => {\n  // Make cancelable buffering Promise\n  const bufferingPromise = makeCancelable(delayedPromise(durationMs));\n\n  // Kick off promise chain\n  bufferingPromise.promise\n    .then(() => instance.update(Action.BufferingEnded()))\n    .catch(\n      _reason => {}\n      //console.log({ isCanceled: _reason.isCanceled })\n    );\n\n  // Side-effect; set the promise in the cache\n  instance.promiseCache.buffering = bufferingPromise;\n};\n\n/** Get a command that sets an image loading Promise */\nconst getLoadingCmd = (\n  imageProps: ImageProps,\n  experimentalDecode?: boolean\n): Cmd => instance => {\n  // Make cancelable loading Promise\n  const loadingPromise = makeCancelable(\n    loadImage(imageProps, experimentalDecode)\n  );\n\n  // Kick off request for Image and attach listeners for response\n  loadingPromise.promise\n    .then(_res => instance.update(Action.LoadSuccess({})))\n    .catch(e => {\n      // If the Loading Promise was canceled, it means we have stopped\n      // loading due to unmount, rather than an error.\n      if (!e.isCanceled) {\n        // TODO: think more about the error here\n        instance.update(Action.LoadError({ msg: \"Failed to load\" }));\n      }\n    });\n\n  // Side-effect; set the promise in the cache\n  instance.promiseCache.loading = loadingPromise;\n};\n\n/** Command that cancels the buffering Promise */\nconst cancelBufferingCmd: Cmd = instance => {\n  // Side-effect; cancel the promise in the cache\n  // We know this exists if we are in a Buffering state\n  instance.promiseCache.buffering.cancel();\n};\n\n/**\n * Component that preloads the image once it is in the viewport,\n * and then swaps it in. Takes a render prop that allows to specify\n * what is rendered based on the loading state.\n */\nexport class LazyImageFull extends React.Component<\n  LazyImageFullProps,\n  LazyImageFullState\n> {\n  static displayName = \"LazyImageFull\";\n\n  /** A central place to store promises.\n   * A bit silly, but passing promsises directly in the state\n   * was giving me weird timing issues. This way we can keep\n   * the promises in check, and pick them up from the respective methods.\n   * FUTURE: Could pass the relevant key in Buffering and Loading, so\n   * that at least we know where they are from a single source.\n   */\n  promiseCache: {\n    [key: string]: CancelablePromise;\n  } = {};\n\n  initialState = LazyImageFullState.NotAsked();\n\n  /** Emit the next state based on actions.\n   *  This is the core of the component!\n   */\n  static reducer(\n    action: Action,\n    prevState: LazyImageFullState,\n    props: LazyImageFullProps\n  ): ReducerResult {\n    return Action.match(action, {\n      ViewChanged: ({ inView }) => {\n        if (inView === true) {\n          // If src is not specified, then there is nothing to preload; skip to Loaded state\n          if (!props.src) {\n            return { nextState: LazyImageFullState.LoadSuccess() }; // Error wtf\n          } else {\n            // If in view, only load something if NotAsked, otherwise leave untouched\n            return LazyImageFullState.match(prevState, {\n              NotAsked: () => {\n                // If debounce is specified, then start buffering\n                if (!!props.debounceDurationMs) {\n                  return {\n                    nextState: LazyImageFullState.Buffering(),\n                    cmd: getBufferingCmd(props.debounceDurationMs)\n                  };\n                } else {\n                  // If no debounce is specified, then start loading immediately\n                  return {\n                    nextState: LazyImageFullState.Loading(),\n                    cmd: getLoadingCmd(props, props.experimentalDecode)\n                  };\n                }\n              },\n              // Do nothing in other states\n              default: () => ({ nextState: prevState })\n            });\n          }\n        } else {\n          // If out of view, cancel if Buffering, otherwise leave untouched\n          return LazyImageFullState.match(prevState, {\n            Buffering: () => ({\n              nextState: LazyImageFullState.NotAsked(),\n              cmd: cancelBufferingCmd\n            }),\n            // Do nothing in other states\n            default: () => ({ nextState: prevState })\n          });\n        }\n      },\n      // Buffering has ended/succeeded, kick off request for image\n      BufferingEnded: () => ({\n        nextState: LazyImageFullState.Loading(),\n        cmd: getLoadingCmd(props, props.experimentalDecode)\n      }),\n      // Loading the image succeeded, simple\n      LoadSuccess: () => ({ nextState: LazyImageFullState.LoadSuccess() }),\n      // Loading the image failed, simple\n      LoadError: e => ({ nextState: LazyImageFullState.LoadError(e) })\n    });\n  }\n\n  constructor(props: LazyImageFullProps) {\n    super(props);\n    this.state = this.initialState;\n\n    // Bind methods\n    this.update = this.update.bind(this);\n  }\n\n  update(action: Action) {\n    // Get the next state and any effects\n    const { nextState, cmd } = LazyImageFull.reducer(\n      action,\n      this.state,\n      this.props\n    );\n\n    // Debugging\n    if (this.props.debugActions) {\n      if (process.env.NODE_ENV === \"production\") {\n        console.warn(\n          'You are running LazyImage with debugActions=\"true\" in production. This might have performance implications.'\n        );\n      }\n      console.log({ action, prevState: this.state, nextState });\n    }\n\n    // Actually set the state, and kick off any effects after that\n    this.setState(nextState, () => cmd && cmd(this));\n  }\n\n  componentWillUnmount() {\n    // Clear the Promise Cache\n    if (this.promiseCache.loading) {\n      // NOTE: This does not cancel the request, only the callback.\n      // We weould need fetch() and an AbortHandler for that.\n      this.promiseCache.loading.cancel();\n    }\n    if (this.promiseCache.buffering) {\n      this.promiseCache.buffering.cancel();\n    }\n    this.promiseCache = {};\n  }\n\n  // Render function\n  render() {\n    // This destructuring is silly\n    const {\n      children,\n      loadEagerly,\n      observerProps,\n      experimentalDecode,\n      debounceDurationMs,\n      debugActions,\n      ...imageProps\n    } = this.props;\n\n    if (loadEagerly) {\n      // If eager, skip the observer and view changing stuff; resolve the imageState as loaded.\n      return children({\n        // We know that the state tags and the enum match up\n        imageState: LazyImageFullState.LoadSuccess().tag as ImageState,\n        imageProps\n      });\n    } else {\n      return (\n        <Observer\n          rootMargin=\"50px 0px\"\n          // TODO: reconsider threshold\n          threshold={0.01}\n          {...observerProps}\n          onChange={inView => this.update(Action.ViewChanged({ inView }))}\n        >\n          {({ ref }) =>\n            children({\n              // We know that the state tags and the enum match up, apart\n              // from Buffering not being exposed\n              imageState:\n                this.state.tag === \"Buffering\"\n                  ? ImageState.Loading\n                  : (this.state.tag as ImageState),\n              imageProps,\n              ref\n            })\n          }\n        </Observer>\n      );\n    }\n  }\n}\n\n///// Utilities /////\n\n/** Promise constructor for loading an image */\nconst loadImage = (\n  { src, srcSet, alt, sizes }: ImageProps,\n  experimentalDecode = false\n) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    if (srcSet) {\n      image.srcset = srcSet;\n    }\n    if (alt) {\n      image.alt = alt;\n    }\n    if (sizes) {\n      image.sizes = sizes;\n    }\n    image.src = src;\n\n    /** @see: https://www.chromestatus.com/feature/5637156160667648 */\n    if (experimentalDecode && \"decode\" in image) {\n      return (\n        image\n          // NOTE: .decode() is not in the TS defs yet\n          // TODO: consider writing the .decode() definition and sending a PR\n          //@ts-ignore\n          .decode()\n          .then((image: HTMLImageElement) => resolve(image))\n          .catch((err: any) => reject(err))\n      );\n    }\n\n    image.onload = resolve;\n    image.onerror = reject;\n  });\n\n/** Promise that resolves after a specified number of ms */\nconst delayedPromise = (ms: number) =>\n  new Promise(resolve => setTimeout(resolve, ms));\n\ninterface CancelablePromise {\n  promise: Promise<{}>;\n  cancel: () => void;\n}\n\n/** Make a Promise \"cancelable\".\n *\n * Rejects with {isCanceled: true} if canceled.\n *\n * The way this works is by wrapping it with internal hasCanceled_ state\n * and checking it before resolving.\n */\nconst makeCancelable = (promise: Promise<any>): CancelablePromise => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      (val: any) => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val))\n    );\n    promise.catch(\n      (error: any) =>\n        hasCanceled_ ? reject({ isCanceled: true }) : reject(error)\n    );\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    }\n  };\n};\n","import React from \"react\";\nimport {\n  LazyImageFull,\n  CommonLazyImageProps,\n  ImageState,\n  ImageProps\n} from \"./LazyImageFull\";\n\n/**\n * Valid props for LazyImage\n */\nexport interface LazyImageRenderPropArgs {\n  imageProps: ImageProps;\n}\n\nexport interface RefArg {\n  /** When not loading eagerly, a ref to bind to the DOM element. This is needed for the intersection calculation to work. */\n  ref?: React.RefObject<any>;\n}\n\nexport interface LazyImageProps extends CommonLazyImageProps {\n  /** Component to display once image has loaded */\n  actual: (args: LazyImageRenderPropArgs) => React.ReactElement<{}>;\n\n  /** Component to display while image has not been requested\n   * @default: undefined\n   */\n  placeholder: (\n    args: LazyImageRenderPropArgs & RefArg\n  ) => React.ReactElement<{}>;\n\n  /** Component to display while the image is loading\n   * @default placeholder, if defined\n   */\n  loading?: () => React.ReactElement<{}>;\n\n  /** Component to display if the image fails to load\n   * @default actual (broken image)\n   */\n  error?: () => React.ReactElement<{}>;\n}\n\n/**\n * Component that preloads the image once it is in the viewport,\n * and then swaps it in. Has predefined rendering logic, but the\n * specifics are up to the caller.\n */\nexport const LazyImage: React.StatelessComponent<LazyImageProps> = ({\n  actual,\n  placeholder,\n  loading,\n  error,\n  ...rest\n}) => (\n  <LazyImageFull {...rest}>\n    {({ imageState, imageProps, ref }) => {\n      // Call the appropriate render callback based on the state\n      // and the props specified, passing on relevant props.\n      switch (imageState) {\n        case ImageState.NotAsked:\n          return !!placeholder && placeholder({ imageProps, ref });\n\n        case ImageState.Loading:\n          // Only render loading if specified, otherwise placeholder\n          return !!loading\n            ? loading()\n            : !!placeholder && placeholder({ imageProps, ref });\n\n        case ImageState.LoadSuccess:\n          return actual({ imageProps });\n\n        case ImageState.LoadError:\n          // Only render error if specified, otherwise actual (broken image)\n          return !!error ? error() : actual({ imageProps });\n      }\n    }}\n  </LazyImageFull>\n);\n\nLazyImage.displayName = \"LazyImage\";\n"]},"metadata":{},"sourceType":"module"}