{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/iku/Dropbox/program/project/samonline/UI/src/logged_in/components/posts/PostContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, TablePagination, Divider, Toolbar, Typography, Button, Paper, Box, withStyles } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SelfAligningImage from \"../../../shared/components/SelfAligningImage\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ConfirmationDialog from \"../../../shared/components/ConfirmationDialog\";\nconst styles = {\n  dBlock: {\n    display: \"block\"\n  },\n  dNone: {\n    display: \"none\"\n  },\n  toolbar: {\n    justifyContent: \"space-between\"\n  }\n};\nconst rowsPerPage = 25;\n\nfunction PostContent(props) {\n  _s();\n\n  const {\n    pushMessageToSnackbar,\n    setPosts,\n    posts,\n    openAddPostModal,\n    classes\n  } = props;\n  const [page, setPage] = useState(0);\n  const [isDeletePostDialogOpen, setIsDeletePostDialogOpen] = useState(false);\n  const [isDeletePostDialogLoading, setIsDeletePostDialogLoading] = useState(false);\n  const closeDeletePostDialog = useCallback(() => {\n    setIsDeletePostDialogOpen(false);\n    setIsDeletePostDialogLoading(false);\n  }, [setIsDeletePostDialogOpen, setIsDeletePostDialogLoading]);\n  const deletePost = useCallback(() => {\n    setIsDeletePostDialogLoading(true);\n    setTimeout(() => {\n      const _posts = [...posts];\n\n      const index = _posts.find(element => element.id === deletePost.id);\n\n      _posts.splice(index, 1);\n\n      setPosts(_posts);\n      pushMessageToSnackbar({\n        text: \"Your post has been deleted\"\n      });\n      closeDeletePostDialog();\n    }, 1500);\n  }, [posts, setPosts, setIsDeletePostDialogLoading, pushMessageToSnackbar, closeDeletePostDialog]);\n  const onDelete = useCallback(() => {\n    setIsDeletePostDialogOpen(true);\n  }, [setIsDeletePostDialogOpen]);\n  const handleChangePage = useCallback((__, page) => {\n    setPage(page);\n  }, [setPage]);\n  const printImageGrid = useCallback(() => {\n    if (posts.length > 0) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        p: 1,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: posts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(post => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            sm: 4,\n            md: 3,\n            children: /*#__PURE__*/_jsxDEV(SelfAligningImage, {\n              src: post.src,\n              title: post.name,\n              timeStamp: post.timestamp,\n              options: [{\n                name: \"Delete\",\n                onClick: () => {\n                  onDelete(post);\n                },\n                icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 31\n                }, this)\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsxDEV(HighlightedInformation, {\n        children: \"No posts added yet. Click on \\\"NEW\\\" to create your first one.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }, [posts, onDelete, page]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      className: classes.toolbar,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Your Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: openAddPostModal,\n        disableElevation: true,\n        children: \"Add Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), printImageGrid(), /*#__PURE__*/_jsxDEV(TablePagination, {\n      component: \"div\",\n      count: posts.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      backIconButtonProps: {\n        \"aria-label\": \"Previous Page\"\n      },\n      nextIconButtonProps: {\n        \"aria-label\": \"Next Page\"\n      },\n      onChangePage: handleChangePage,\n      classes: {\n        select: classes.dNone,\n        selectIcon: classes.dNone,\n        actions: posts.length > 0 ? classes.dBlock : classes.dNone,\n        caption: posts.length > 0 ? classes.dBlock : classes.dNone\n      },\n      labelRowsPerPage: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      open: isDeletePostDialogOpen,\n      title: \"Confirmation\",\n      content: \"Do you really want to delete the post?\",\n      onClose: closeDeletePostDialog,\n      loading: isDeletePostDialogLoading,\n      onConfirm: deletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostContent, \"kIlx4N4O8Ojg+wwtwqp/jIbGgNU=\");\n\n_c = PostContent;\nPostContent.propTypes = {\n  openAddPostModal: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  pushMessageToSnackbar: PropTypes.func\n};\nexport default withStyles(styles)(PostContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContent\");","map":{"version":3,"sources":["/home/iku/Dropbox/program/project/samonline/UI/src/logged_in/components/posts/PostContent.js"],"names":["React","useState","useCallback","PropTypes","Grid","TablePagination","Divider","Toolbar","Typography","Button","Paper","Box","withStyles","DeleteIcon","SelfAligningImage","HighlightedInformation","ConfirmationDialog","styles","dBlock","display","dNone","toolbar","justifyContent","rowsPerPage","PostContent","props","pushMessageToSnackbar","setPosts","posts","openAddPostModal","classes","page","setPage","isDeletePostDialogOpen","setIsDeletePostDialogOpen","isDeletePostDialogLoading","setIsDeletePostDialogLoading","closeDeletePostDialog","deletePost","setTimeout","_posts","index","find","element","id","splice","text","onDelete","handleChangePage","__","printImageGrid","length","slice","map","post","src","name","timestamp","onClick","icon","select","selectIcon","actions","caption","propTypes","func","isRequired","object","arrayOf"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Grid,\n  TablePagination,\n  Divider,\n  Toolbar,\n  Typography,\n  Button,\n  Paper,\n  Box,\n  withStyles,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SelfAligningImage from \"../../../shared/components/SelfAligningImage\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ConfirmationDialog from \"../../../shared/components/ConfirmationDialog\";\n\nconst styles = {\n  dBlock: { display: \"block\" },\n  dNone: { display: \"none\" },\n  toolbar: {\n    justifyContent: \"space-between\",\n  },\n};\n\nconst rowsPerPage = 25;\n\nfunction PostContent(props) {\n  const {\n    pushMessageToSnackbar,\n    setPosts,\n    posts,\n    openAddPostModal,\n    classes,\n  } = props;\n  const [page, setPage] = useState(0);\n  const [isDeletePostDialogOpen, setIsDeletePostDialogOpen] = useState(false);\n  const [isDeletePostDialogLoading, setIsDeletePostDialogLoading] = useState(\n    false\n  );\n\n  const closeDeletePostDialog = useCallback(() => {\n    setIsDeletePostDialogOpen(false);\n    setIsDeletePostDialogLoading(false);\n  }, [setIsDeletePostDialogOpen, setIsDeletePostDialogLoading]);\n\n  const deletePost = useCallback(() => {\n    setIsDeletePostDialogLoading(true);\n    setTimeout(() => {\n      const _posts = [...posts];\n      const index = _posts.find((element) => element.id === deletePost.id);\n      _posts.splice(index, 1);\n      setPosts(_posts);\n      pushMessageToSnackbar({\n        text: \"Your post has been deleted\",\n      });\n      closeDeletePostDialog();\n    }, 1500);\n  }, [\n    posts,\n    setPosts,\n    setIsDeletePostDialogLoading,\n    pushMessageToSnackbar,\n    closeDeletePostDialog,\n  ]);\n\n  const onDelete = useCallback(() => {\n    setIsDeletePostDialogOpen(true);\n  }, [setIsDeletePostDialogOpen]);\n\n  const handleChangePage = useCallback(\n    (__, page) => {\n      setPage(page);\n    },\n    [setPage]\n  );\n\n  const printImageGrid = useCallback(() => {\n    if (posts.length > 0) {\n      return (\n        <Box p={1}>\n          <Grid container spacing={1}>\n            {posts\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((post) => (\n                <Grid item xs={6} sm={4} md={3} key={post.id}>\n                  <SelfAligningImage\n                    src={post.src}\n                    title={post.name}\n                    timeStamp={post.timestamp}\n                    options={[\n                      {\n                        name: \"Delete\",\n                        onClick: () => {\n                          onDelete(post);\n                        },\n                        icon: <DeleteIcon />,\n                      },\n                    ]}\n                  />\n                </Grid>\n              ))}\n          </Grid>\n        </Box>\n      );\n    }\n    return (\n      <Box m={2}>\n        <HighlightedInformation>\n          No posts added yet. Click on &quot;NEW&quot; to create your first one.\n        </HighlightedInformation>\n      </Box>\n    );\n  }, [posts, onDelete, page]);\n\n  return (\n    <Paper>\n      <Toolbar className={classes.toolbar}>\n        <Typography variant=\"h6\">Your Posts</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={openAddPostModal}\n          disableElevation\n        >\n          Add Post\n        </Button>\n      </Toolbar>\n      <Divider />\n      {printImageGrid()}\n      <TablePagination\n        component=\"div\"\n        count={posts.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          \"aria-label\": \"Previous Page\",\n        }}\n        nextIconButtonProps={{\n          \"aria-label\": \"Next Page\",\n        }}\n        onChangePage={handleChangePage}\n        classes={{\n          select: classes.dNone,\n          selectIcon: classes.dNone,\n          actions: posts.length > 0 ? classes.dBlock : classes.dNone,\n          caption: posts.length > 0 ? classes.dBlock : classes.dNone,\n        }}\n        labelRowsPerPage=\"\"\n      />\n      <ConfirmationDialog\n        open={isDeletePostDialogOpen}\n        title=\"Confirmation\"\n        content=\"Do you really want to delete the post?\"\n        onClose={closeDeletePostDialog}\n        loading={isDeletePostDialogLoading}\n        onConfirm={deletePost}\n      />\n    </Paper>\n  );\n}\n\nPostContent.propTypes = {\n  openAddPostModal: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  pushMessageToSnackbar: PropTypes.func,\n};\n\nexport default withStyles(styles)(PostContent);\n"]},"metadata":{},"sourceType":"module"}